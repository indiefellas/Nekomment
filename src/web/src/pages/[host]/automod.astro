---
import { rules } from "../../../../api/db/schema";
import HostNav from "../../components/dashboard/HostNav.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import lodash from "lodash";

const { env } = Astro.locals.runtime;
const { host } = Astro.params;

const hostData = await env.NEKOMMENT_API.getHost(
    Astro.cookies.get("token")?.value ?? "",
    host ?? ""
)

if (!hostData.success) return Astro.rewrite('/' + hostData.status || 0)

const rules = await env.NEKOMMENT_API.getRules(
    Astro.cookies.get("token")?.value ?? "",
    host ?? "",
)

if (!rules.success && rules.status == 401)
    return Astro.redirect("/login?redirect=" + Astro.url.pathname, 302);
else if (!rules.success) return Astro.redirect("/dash", 302);

let err = "";
if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const name = data.get("name")?.toString() || "";
        const rule = data.get("rule")?.toString() || "";
        const type = parseInt(data.get("type")?.toString() || '0', 10);
        const action = parseInt(data.get("action")?.toString() || '0', 10);
        
        let session = await env.NEKOMMENT_API.createRule(
            Astro.cookies.get("token")?.value || "",
            host || '',
            name,
            rule,
            type,
            action
        );

        if (!session.success) {
            err = "An error occurred. Please try again.";
        }
    } catch {
        err = "An error occurred. Please try again.";
    }
}
---

<MainLayout title={'Auto Moderation: ' + host + ' - Nekomment'}>
    <Fragment slot="nav-mobile">
        <HostNav host={hostData.data} />
    </Fragment>
    <div class="fill-screen">
        <div class="dashboard-container">
            <div class="left">
                <div class="left-nav">
                    <HostNav host={hostData.data} />
                </div>
            </div>
            <div class="right">
                <div class="heading">
                    <h1>Auto Moderation</h1>
                    <button class="primary">Create new rule</button>
                </div>
                <div class="rules-container">
                    <div class="rules-list">
                        {rules.data?.map(r =>
                            <div class="card rule">
                                <h3>{r.name}</h3>
                                <p>{r.rule}</p> - <p>{r.type == 0 ? 'String-based' : 'Regex'}</p> - <p>{r.enabled}</p> - <p>{r.actionType == 0 ? 'Block comment' : 'Mark to review'}</p>
                                <button>Edit rule</button> <button class="warning">Delete rule</button>
                            </div>
                        )}
                    </div>
                    {rules.data?.length === 0 && <p>
                        Auto Moderation is a system that allows you to automatically moderate your comments
                        section with content filters, to make moderation easier on your end.
                    </p>}
                </div>
            </div>
        </div>
    </div>
    
    <style scoped>
        .dashboard-container {
            margin-inline: var(--main-margin);
            margin-top: 12px;
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 25px;
        }
    
        .left {
            container: left;
        }

        .left-nav {
            position: sticky;
            top: 80px;
        }
    
        .rules-container {
            margin-top: 12px;
    
            .heading {
                display: flex;
                justify-content: space-between;
                align-items: end;
                width: 100%;
            }
    
            .rules-list {
                margin-top: 12px;
                display: grid;
                grid-template-columns: repeat(2, minmax(100px, 1fr));
                gap: 12px;
    
                .rule {
                    text-decoration: none;
                    padding: 10px;
                    flex-direction: column;
                    gap: 0;
    
                    .heading {
                        align-items: start;
                    }
    
                    blockquote {
                        flex-direction: column;
                        margin-left: 24px;
                    }
                }
            }
        }
    
        @media screen and (width <= 900px) {
            .dashboard-container {
                grid-template-columns: 1fr;

                .left {
                    display: none;
                }
            }
    
            .rules-container {
                .rules-list {
                    grid-template-columns: repeat(1, 1fr);
                }
            }
        }
    </style>
</MainLayout>